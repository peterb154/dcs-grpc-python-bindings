# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dcs.tts.v0 import tts_pb2 as dcs_dot_tts_dot_v0_dot_tts__pb2


class TtsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transmit = channel.unary_unary(
                '/dcs.tts.v0.TtsService/Transmit',
                request_serializer=dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitRequest.SerializeToString,
                response_deserializer=dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitResponse.FromString,
                )


class TtsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Transmit(self, request, context):
        """Synthesize text to speech and transmit it over SRS. By default, this blocks until a
        transmission completed (unless `async` is set to `true`). This can be used to prevent
        transmission to overlap each other, by not sending another transmission on the same frequency
        until you've received the response from the previous transmission on that frequency. However,
        it does not block or prevent any other client from transmitting over the same frequency at the
        same time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TtsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transmit': grpc.unary_unary_rpc_method_handler(
                    servicer.Transmit,
                    request_deserializer=dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitRequest.FromString,
                    response_serializer=dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dcs.tts.v0.TtsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TtsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Transmit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dcs.tts.v0.TtsService/Transmit',
            dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitRequest.SerializeToString,
            dcs_dot_tts_dot_v0_dot_tts__pb2.TransmitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
