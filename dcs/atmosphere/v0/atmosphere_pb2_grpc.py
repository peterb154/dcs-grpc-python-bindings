# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dcs.atmosphere.v0 import atmosphere_pb2 as dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2


class AtmosphereServiceStub(object):
    """https://wiki.hoggitworld.com/view/DCS_singleton_atmosphere
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetWind = channel.unary_unary(
                '/dcs.atmosphere.v0.AtmosphereService/GetWind',
                request_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindRequest.SerializeToString,
                response_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindResponse.FromString,
                )
        self.GetWindWithTurbulence = channel.unary_unary(
                '/dcs.atmosphere.v0.AtmosphereService/GetWindWithTurbulence',
                request_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceRequest.SerializeToString,
                response_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceResponse.FromString,
                )
        self.GetTemperatureAndPressure = channel.unary_unary(
                '/dcs.atmosphere.v0.AtmosphereService/GetTemperatureAndPressure',
                request_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureRequest.SerializeToString,
                response_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureResponse.FromString,
                )


class AtmosphereServiceServicer(object):
    """https://wiki.hoggitworld.com/view/DCS_singleton_atmosphere
    """

    def GetWind(self, request, context):
        """https://wiki.hoggitworld.com/view/DCS_func_getWind
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWindWithTurbulence(self, request, context):
        """https://wiki.hoggitworld.com/view/DCS_func_getWindWithTurbulence
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemperatureAndPressure(self, request, context):
        """https://wiki.hoggitworld.com/view/DCS_func_getWindWithTurbulence
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AtmosphereServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetWind': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWind,
                    request_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindRequest.FromString,
                    response_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindResponse.SerializeToString,
            ),
            'GetWindWithTurbulence': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWindWithTurbulence,
                    request_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceRequest.FromString,
                    response_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceResponse.SerializeToString,
            ),
            'GetTemperatureAndPressure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperatureAndPressure,
                    request_deserializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureRequest.FromString,
                    response_serializer=dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dcs.atmosphere.v0.AtmosphereService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AtmosphereService(object):
    """https://wiki.hoggitworld.com/view/DCS_singleton_atmosphere
    """

    @staticmethod
    def GetWind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dcs.atmosphere.v0.AtmosphereService/GetWind',
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindRequest.SerializeToString,
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWindWithTurbulence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dcs.atmosphere.v0.AtmosphereService/GetWindWithTurbulence',
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceRequest.SerializeToString,
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetWindWithTurbulenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTemperatureAndPressure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dcs.atmosphere.v0.AtmosphereService/GetTemperatureAndPressure',
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureRequest.SerializeToString,
            dcs_dot_atmosphere_dot_v0_dot_atmosphere__pb2.GetTemperatureAndPressureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
